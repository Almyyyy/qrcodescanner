{"version":3,"sources":["Html5QrcodePlugin.jsx","ResultContainer.jsx","App.js","reportWebVitals.js","index.js"],"names":["qrcodeRegionId","Html5QrcodePlugin","id","this","html5QrcodeScanner","clear","catch","error","console","config","props","fps","qrbox","aspectRatio","undefined","disableFlip","createConfig","verbose","qrCodeSuccessCallback","Html5QrcodeScanner","render","qrCodeErrorCallback","React","Component","filterResults","results","filteredResults","i","length","decodedText","push","ResultContainerTable","data","map","result","log","ResultContainer","App","state","decodedResults","onNewScanResult","bind","decodedResult","setState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"6NAGMA,EAAiB,2BAEjBC,E,4JACF,WACI,OAAO,qBAAKC,GAAIF,M,kCAGpB,WAGIG,KAAKC,mBAAmBC,QAAQC,OAAM,SAAAC,GAClCC,QAAQD,MAAM,uCAAwCA,Q,+BAI9D,WAmBI,IAAIE,EAjBJ,SAAsBC,GAClB,IAAID,EAAS,GAab,OAZIC,EAAMC,MACVF,EAAOE,IAAMD,EAAMC,KAEfD,EAAME,QACVH,EAAOG,MAAQF,EAAME,OAEjBF,EAAMG,cACVJ,EAAOI,YAAcH,EAAMG,kBAEDC,IAAtBJ,EAAMK,cACVN,EAAOM,YAAcL,EAAMK,aAEpBN,EAGEO,CAAab,KAAKO,OAC3BO,GAAiC,IAAvBd,KAAKO,MAAMO,QAGzB,IAAMd,KAAKO,MAAMQ,sBACb,KAAM,8CAGVf,KAAKC,mBAAqB,IAAIe,IAC1BnB,EAAgBS,EAAQQ,GAC5Bd,KAAKC,mBAAmBgB,OACpBjB,KAAKO,MAAMQ,sBACXf,KAAKO,MAAMW,yB,GA5CSC,IAAMC,WAgDvBtB,ICnDf,SAASuB,EAAcC,GAEnB,IADA,IAAIC,EAAkB,GACbC,EAAI,EAAGA,EAAIF,EAAQG,SAAUD,EACxB,IAANA,EAKAF,EAAQE,GAAGE,cAAgBJ,EAAQE,EAAE,GAAGE,aACxCH,EAAgBI,KAAKL,EAAQE,IAL7BD,EAAgBI,KAAKL,EAAQE,IAQrC,OAAOD,E,IAGLK,E,4JACF,WACI,IAAIN,EAAUD,EAAcrB,KAAKO,MAAMsB,MACvC,OACI,gCACI,gCAEQP,EAAQQ,KAAI,SAACC,EAAQP,GAEjB,OADAnB,QAAQ2B,IAAID,GACJ,6BACJ,6BAAKA,EAAOL,eADCF,c,GATVL,IAAMC,WAoBnCa,E,4JACF,WACkBZ,EAAcrB,KAAKO,MAAMe,SACvC,OAAQ,cAAC,EAAD,CAAsBO,KAAM7B,KAAKO,MAAMe,c,GAHzBH,IAAMC,WAOrBa,ICDAC,E,kDAtCb,WAAY3B,GAAQ,IAAD,8BACjB,cAAMA,IACD4B,MAAQ,CACXC,eAAgB,IAIlB,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBAPN,E,0CAUnB,WACE,OACE,gCACI,cAAC,EAAD,CACE9B,IAAK,GACLC,MAAO,IACPG,aAAa,EACbG,sBAAuBf,KAAKqC,kBAG9B,cAAC,EAAD,CAAiBf,QAAStB,KAAKmC,MAAMC,sB,6BAK7C,SAAgBV,EAAaa,GAC3BlC,QAAQ2B,IACN,eAAgBO,GAIlBvC,KAAKwC,UAAS,SAACL,EAAO5B,GAEpB,OADA4B,EAAMC,eAAeT,KAAKY,GACnBJ,S,GAlCKhB,IAAMC,WCQTqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASjC,OACP,cAAC,IAAMkC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1a7b92d3.chunk.js","sourcesContent":["import { Html5QrcodeScanner } from \"html5-qrcode\";\nimport React from 'react';\n\nconst qrcodeRegionId = \"html5qr-code-full-region\";\n\nclass Html5QrcodePlugin extends React.Component {\n    render() {\n        return <div id={qrcodeRegionId} />;\n    }\n\n    componentWillUnmount() {\n        // TODO(mebjas): See if there is a better way to handle\n        //  promise in `componentWillUnmount`.\n        this.html5QrcodeScanner.clear().catch(error => {\n            console.error(\"Failed to clear html5QrcodeScanner. \", error);\n        });\n    }\n\n    componentDidMount() {\n        // Creates the configuration object for Html5QrcodeScanner.\n        function createConfig(props) {\n            var config = {};\n            if (props.fps) {\n            config.fps = props.fps;\n            }\n            if (props.qrbox) {\n            config.qrbox = props.qrbox;\n            }\n            if (props.aspectRatio) {\n            config.aspectRatio = props.aspectRatio;\n            }\n            if (props.disableFlip !== undefined) {\n            config.disableFlip = props.disableFlip;\n            }\n            return config;\n        }\n\n        var config = createConfig(this.props);\n        var verbose = this.props.verbose === true;\n\n        // Suceess callback is required.\n        if (!(this.props.qrCodeSuccessCallback )) {\n            throw \"qrCodeSuccessCallback is required callback.\";\n        }\n\n        this.html5QrcodeScanner = new Html5QrcodeScanner(\n            qrcodeRegionId, config, verbose);\n        this.html5QrcodeScanner.render(\n            this.props.qrCodeSuccessCallback,\n            this.props.qrCodeErrorCallback);\n    }\n};\n\nexport default Html5QrcodePlugin;\n","import React from 'react';\n\nfunction filterResults(results) {\n    let filteredResults = [];\n    for (var i = 0; i < results.length; ++i) {\n        if (i === 0) {\n            filteredResults.push(results[i]);\n            continue;\n        }\n\n        if (results[i].decodedText !== results[i-1].decodedText) {\n            filteredResults.push(results[i]);\n        }\n    }\n    return filteredResults;\n}\n\nclass ResultContainerTable extends React.Component {\n    render() {\n        var results = filterResults(this.props.data);\n        return (\n            <table>\n                <tbody>\n                    {\n                        results.map((result, i) => {\n                            console.log(result);\n                            return (<tr key={i}>\n                                <td>{result.decodedText}</td>\n                            </tr>);\n                        })\n                    }\n                </tbody>\n            </table>\n        );\n    }\n}\n\nclass ResultContainer extends React.Component {\n    render() { \n        let results = filterResults(this.props.results);\n        return (<ResultContainerTable data={this.props.results} />);\n    }\n}\n\nexport default ResultContainer;","import React from 'react';\nimport Html5QrcodePlugin from './Html5QrcodePlugin.jsx'\nimport ResultContainer from './ResultContainer.jsx'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      decodedResults: []\n    }\n\n    // This binding is necessary to make `this` work in the callback.\n    this.onNewScanResult = this.onNewScanResult.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n          <Html5QrcodePlugin \n            fps={10}\n            qrbox={250}\n            disableFlip={false}\n            qrCodeSuccessCallback={this.onNewScanResult}\n          />\n        \n          <ResultContainer results={this.state.decodedResults} />\n      </div>\n    );\n  }\n\n  onNewScanResult(decodedText, decodedResult) {\n    console.log(\n      \"App [result]\", decodedResult);\n\n    // let decodedResults = this.state.decodedResults;\n    // decodedResults.push(decodedResult);\n    this.setState((state, props) => {\n      state.decodedResults.push(decodedResult);\n      return state;\n    });\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}